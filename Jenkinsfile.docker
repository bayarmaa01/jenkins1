pipeline {
    agent any
    
    environment {
        // Docker Hub credentials
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        
        // Docker image details - CHANGE THIS TO YOUR DOCKER HUB USERNAME!
        DOCKERHUB_USERNAME = 'bayarmaa'  // Replace with your actual Docker Hub username
        IMAGE_NAME = 'jenkins-docker-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        FULL_IMAGE_NAME = "${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
        LATEST_IMAGE_NAME = "${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest"
        
        // Use BuildKit for modern Docker builds
        DOCKER_BUILDKIT = '1'
    }
    
    stages {
        stage('Verify Docker') {
            steps {
                script {
                    echo "========================================="
                    echo "  DOCKER ENVIRONMENT VERIFICATION"
                    echo "========================================="
                    
                    sh '''
                        echo "Docker Version:"
                        docker --version
                        
                        echo ""
                        echo "Docker Buildx Version:"
                        docker buildx version || echo "Buildx not installed, using standard build"
                        
                        echo ""
                        echo "Docker is ready!"
                    '''
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                checkout scm
                
                sh '''
                    echo "Repository contents:"
                    ls -la
                    
                    echo ""
                    echo "Verifying required files:"
                    test -f Dockerfile && echo "✅ Dockerfile found" || echo "❌ Dockerfile not found"
                    test -f package.json && echo "✅ package.json found" || echo "❌ package.json not found"
                    test -f server.js && echo "✅ server.js found" || echo "❌ server.js not found"
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "========================================="
                    echo "  BUILDING DOCKER IMAGE"
                    echo "========================================="
                    echo "Image: ${FULL_IMAGE_NAME}"
                    echo "Using BuildKit: ${DOCKER_BUILDKIT}"
                    
                    sh """
                        # Build Docker image with BuildKit
                        DOCKER_BUILDKIT=1 docker build \
                            --progress=plain \
                            --tag ${FULL_IMAGE_NAME} \
                            --tag ${LATEST_IMAGE_NAME} \
                            .
                        
                        echo ""
                        echo "✅ Docker image built successfully!"
                        
                        # List built images
                        echo ""
                        echo "Built images:"
                        docker images | grep ${IMAGE_NAME} || echo "No images found"
                    """
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    echo "========================================="
                    echo "  TESTING DOCKER IMAGE"
                    echo "========================================="
                    
                    sh """
                        set +e  # Don't exit on error
                        
                        # Remove any existing test containers
                        docker rm -f jenkins-test-container 2>/dev/null || true
                        
                        # Run container in background with a name
                        echo "Starting test container..."
                        docker run -d \
                            --name jenkins-test-container \
                            -p 3001:3000 \
                            ${FULL_IMAGE_NAME}
                        
                        # Wait for container to start
                        echo "Waiting for application to start..."
                        sleep 15
                        
                        # Check if container is running
                        if docker ps | grep jenkins-test-container; then
                            echo "✅ Container is running"
                        else
                            echo "❌ Container failed to start"
                            docker logs jenkins-test-container
                            exit 1
                        fi
                        
                        # Test health endpoint
                        echo ""
                        echo "Testing health endpoint..."
                        for i in 1 2 3; do
                            if curl -f http://localhost:3001/health; then
                                echo "✅ Health check passed"
                                break
                            else
                                echo "Attempt \$i failed, retrying..."
                                sleep 5
                            fi
                        done
                        
                        # Test main endpoint
                        echo ""
                        echo "Testing main endpoint..."
                        curl -f http://localhost:3001/ || echo "Warning: Main endpoint test failed"
                        
                        # Show container logs
                        echo ""
                        echo "Container logs:"
                        docker logs jenkins-test-container
                        
                        # Stop and remove test container
                        echo ""
                        echo "Cleaning up test container..."
                        docker stop jenkins-test-container || true
                        docker rm jenkins-test-container || true
                        
                        echo ""
                        echo "✅ Docker image tests completed!"
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    echo "========================================="
                    echo "  LOGGING IN TO DOCKER HUB"
                    echo "========================================="
                    
                    sh '''
                        # Login to Docker Hub using credentials
                        echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin
                        
                        echo "✅ Successfully logged in to Docker Hub"
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "========================================="
                    echo "  PUSHING TO DOCKER HUB"
                    echo "========================================="
                    
                    sh """
                        # Push versioned image
                        echo "Pushing ${FULL_IMAGE_NAME}..."
                        docker push ${FULL_IMAGE_NAME}
                        
                        # Push latest image
                        echo ""
                        echo "Pushing ${LATEST_IMAGE_NAME}..."
                        docker push ${LATEST_IMAGE_NAME}
                        
                        echo ""
                        echo "✅ Images pushed successfully to Docker Hub!"
                        echo ""
                        echo "Image URLs:"
                        echo "  - https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${IMAGE_NAME}"
                        echo "  - docker pull ${FULL_IMAGE_NAME}"
                        echo "  - docker pull ${LATEST_IMAGE_NAME}"
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "========================================="
                    echo "  CLEANING UP LOCAL IMAGES"
                    echo "========================================="
                    
                    sh """
                        # Remove local images to save space
                        docker rmi ${FULL_IMAGE_NAME} || true
                        docker rmi ${LATEST_IMAGE_NAME} || true
                        
                        # Remove dangling images
                        docker image prune -f
                        
                        echo "✅ Cleanup completed"
                    """
                }
            }
        }
        
        stage('Deployment Info') {
            steps {
                script {
                    echo "========================================="
                    echo "  DEPLOYMENT INFORMATION"
                    echo "========================================="
                    echo ""
                    echo "✅ Build #${BUILD_NUMBER} completed successfully!"
                    echo ""
                    echo "Docker Image: ${FULL_IMAGE_NAME}"
                    echo "Docker Hub: https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${IMAGE_NAME}"
                    echo ""
                    echo "To pull and run this image:"
                    echo "  docker pull ${FULL_IMAGE_NAME}"
                    echo "  docker run -d -p 3000:3000 ${FULL_IMAGE_NAME}"
                    echo ""
                    echo "Or use the latest version:"
                    echo "  docker pull ${LATEST_IMAGE_NAME}"
                    echo "  docker run -d -p 3000:3000 ${LATEST_IMAGE_NAME}"
                    echo ""
                    echo "To test locally:"
                    echo "  curl http://localhost:3000/"
                    echo "  curl http://localhost:3000/health"
                    echo ""
                    echo "========================================="
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "========================================="
                echo "  POST-BUILD CLEANUP"
                echo "========================================="
                
                // Logout from Docker Hub
                sh 'docker logout 2>/dev/null || true'
                
                // Clean up any test containers
                sh 'docker rm -f jenkins-test-container 2>/dev/null || true'
                
                // Clean up dangling resources
                sh 'docker system prune -f || true'
                
                echo "Cleanup completed at: ${new Date()}"
            }
        }
        
        success {
            script {
                echo ""
                echo "╔════════════════════════════════════════╗"
                echo "║     ✅ PIPELINE SUCCEEDED              ║"
                echo "╚════════════════════════════════════════╝"
                echo ""
                echo "Build: #${BUILD_NUMBER}"
                echo "Image: ${FULL_IMAGE_NAME}"
                echo "Duration: ${currentBuild.durationString}"
                echo ""
                echo "View on Docker Hub:"
                echo "https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${IMAGE_NAME}/tags"
                echo ""
            }
        }
        
        failure {
            script {
                echo ""
                echo "╔════════════════════════════════════════╗"
                echo "║     ❌ PIPELINE FAILED                 ║"
                echo "╚════════════════════════════════════════╝"
                echo ""
                echo "Build: #${BUILD_NUMBER}"
                echo "Check the console output above for errors"
                echo ""
                
                // Show Docker logs if available
                sh '''
                    if docker ps -a | grep jenkins-test-container; then
                        echo "Test container logs:"
                        docker logs jenkins-test-container || true
                    fi
                '''
            }
        }
    }
}
