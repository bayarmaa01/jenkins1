pipeline {
    agent any
    
    environment {
        // Docker Hub credentials
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        
        // Docker image details - CHANGE THIS TO YOUR DOCKER HUB USERNAME!
        DOCKERHUB_USERNAME = 'bayarmaa'  // Replace with your actual Docker Hub username
        IMAGE_NAME = 'jenkins-docker-app'
        IMAGE_TAG = "${BUILD_NUMBER}"
        FULL_IMAGE_NAME = "${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
        LATEST_IMAGE_NAME = "${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest"
    }
    
    stages {
        stage('Verify Docker') {
            steps {
                script {
                    echo "========================================="
                    echo "  DOCKER ENVIRONMENT VERIFICATION"
                    echo "========================================="
                    
                    sh '''
                        echo "Docker Version:"
                        docker --version
                        
                        echo ""
                        echo "Docker Info:"
                        docker info | head -15
                        
                        echo ""
                        echo "✅ Docker is ready!"
                    '''
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                checkout scm
                
                sh '''
                    echo "Repository contents:"
                    ls -la
                    
                    echo ""
                    echo "Verifying required files:"
                    test -f Dockerfile && echo "✅ Dockerfile found" || echo "❌ Dockerfile not found"
                    test -f package.json && echo "✅ package.json found" || echo "❌ package.json not found"
                    test -f server.js && echo "✅ server.js found" || echo "❌ server.js not found"
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "========================================="
                    echo "  BUILDING DOCKER IMAGE"
                    echo "========================================="
                    echo "Image: ${FULL_IMAGE_NAME}"
                    
                    sh """
                        # Build Docker image (standard build without BuildKit)
                        docker build \
                            --tag ${FULL_IMAGE_NAME} \
                            --tag ${LATEST_IMAGE_NAME} \
                            --no-cache \
                            .
                        
                        echo ""
                        echo "✅ Docker image built successfully!"
                        
                        # List built images
                        echo ""
                        echo "Built images:"
                        docker images | grep ${IMAGE_NAME}
                    """
                }
            }
        }
        
        stage('Inspect Image') {
            steps {
                script {
                    echo "========================================="
                    echo "  INSPECTING DOCKER IMAGE"
                    echo "========================================="
                    
                    sh """
                        # Show image details
                        docker inspect ${FULL_IMAGE_NAME} --format='{{.Size}}' | numfmt --to=iec-i --suffix=B
                        
                        echo ""
                        echo "Image layers:"
                        docker history ${FULL_IMAGE_NAME} --no-trunc
                    """
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    echo "========================================="
                    echo "  TESTING DOCKER IMAGE"
                    echo "========================================="
                    
                    sh """
                        set +e  # Don't exit on error immediately
                        
                        # Clean up any existing test containers
                        docker rm -f jenkins-test-container 2>/dev/null || true
                        
                        # Run container in background
                        echo "Starting test container..."
                        docker run -d \
                            --name jenkins-test-container \
                            -p 3001:3000 \
                            ${FULL_IMAGE_NAME}
                        
                        # Wait for application to start
                        echo "Waiting for application to start..."
                        sleep 15
                        
                        # Check if container is running
                        if docker ps | grep jenkins-test-container > /dev/null; then
                            echo "✅ Container is running"
                        else
                            echo "❌ Container failed to start"
                            echo "Container logs:"
                            docker logs jenkins-test-container
                            docker rm -f jenkins-test-container
                            exit 1
                        fi
                        
                        # Test health endpoint with retries
                        echo ""
                        echo "Testing health endpoint..."
                        SUCCESS=false
                        for i in 1 2 3 4 5; do
                            if curl -f -s http://localhost:3001/health; then
                                echo ""
                                echo "✅ Health check passed (attempt \$i)"
                                SUCCESS=true
                                break
                            else
                                echo "Attempt \$i failed, waiting..."
                                sleep 5
                            fi
                        done
                        
                        if [ "\$SUCCESS" = false ]; then
                            echo "❌ Health check failed after 5 attempts"
                            docker logs jenkins-test-container
                            docker rm -f jenkins-test-container
                            exit 1
                        fi
                        
                        # Test main endpoint
                        echo ""
                        echo "Testing main endpoint..."
                        curl -s http://localhost:3001/ | python3 -m json.tool || echo "Response received"
                        
                        # Show container stats
                        echo ""
                        echo "Container stats:"
                        docker stats jenkins-test-container --no-stream
                        
                        # Show logs
                        echo ""
                        echo "Container logs:"
                        docker logs jenkins-test-container
                        
                        # Cleanup
                        echo ""
                        echo "Cleaning up test container..."
                        docker stop jenkins-test-container
                        docker rm jenkins-test-container
                        
                        echo ""
                        echo "✅ All tests passed!"
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    echo "========================================="
                    echo "  LOGGING IN TO DOCKER HUB"
                    echo "========================================="
                    
                    sh '''
                        # Login to Docker Hub
                        echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u "$DOCKERHUB_CREDENTIALS_USR" --password-stdin
                        
                        echo "✅ Successfully logged in to Docker Hub as $DOCKERHUB_CREDENTIALS_USR"
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "========================================="
                    echo "  PUSHING TO DOCKER HUB"
                    echo "========================================="
                    
                    sh """
                        # Push versioned image
                        echo "Pushing ${FULL_IMAGE_NAME}..."
                        docker push ${FULL_IMAGE_NAME}
                        
                        # Push latest tag
                        echo ""
                        echo "Pushing ${LATEST_IMAGE_NAME}..."
                        docker push ${LATEST_IMAGE_NAME}
                        
                        echo ""
                        echo "✅ Images pushed successfully!"
                        echo ""
                        echo "📦 Available on Docker Hub:"
                        echo "   https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${IMAGE_NAME}/tags"
                    """
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "========================================="
                    echo "  CLEANING UP"
                    echo "========================================="
                    
                    sh """
                        # Remove local images
                        echo "Removing local images..."
                        docker rmi ${FULL_IMAGE_NAME} 2>/dev/null || true
                        docker rmi ${LATEST_IMAGE_NAME} 2>/dev/null || true
                        
                        # Prune dangling images
                        echo "Pruning dangling images..."
                        docker image prune -f
                        
                        echo "✅ Cleanup completed"
                    """
                }
            }
        }
        
        stage('Deployment Info') {
            steps {
                script {
                    echo ""
                    echo "╔═══════════════════════════════════════════════════╗"
                    echo "║           DEPLOYMENT INFORMATION                  ║"
                    echo "╚═══════════════════════════════════════════════════╝"
                    echo ""
                    echo "🏗️  Build Number: ${BUILD_NUMBER}"
                    echo "🐳 Docker Image: ${FULL_IMAGE_NAME}"
                    echo "🔗 Docker Hub: https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${IMAGE_NAME}"
                    echo ""
                    echo "📥 To pull and run:"
                    echo "   docker pull ${FULL_IMAGE_NAME}"
                    echo "   docker run -d -p 3000:3000 --name myapp ${FULL_IMAGE_NAME}"
                    echo ""
                    echo "🧪 To test:"
                    echo "   curl http://localhost:3000/"
                    echo "   curl http://localhost:3000/health"
                    echo ""
                    echo "🔄 To use latest version:"
                    echo "   docker pull ${LATEST_IMAGE_NAME}"
                    echo "   docker run -d -p 3000:3000 ${LATEST_IMAGE_NAME}"
                    echo ""
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "========================================="
                echo "  POST-BUILD CLEANUP"
                echo "========================================="
                
                // Logout from Docker Hub
                sh 'docker logout 2>/dev/null || true'
                
                // Remove test containers
                sh 'docker rm -f jenkins-test-container 2>/dev/null || true'
                
                // System cleanup
                sh 'docker system prune -f --volumes 2>/dev/null || true'
                
                echo "Pipeline finished at: ${new Date()}"
            }
        }
        
        success {
            script {
                echo ""
                echo "╔═══════════════════════════════════════════════════╗"
                echo "║              ✅ BUILD SUCCESSFUL                  ║"
                echo "╚═══════════════════════════════════════════════════╝"
                echo ""
                echo "Build: #${BUILD_NUMBER}"
                echo "Duration: ${currentBuild.durationString}"
                echo "Image: ${FULL_IMAGE_NAME}"
                echo ""
                echo "View on Docker Hub:"
                echo "https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${IMAGE_NAME}/tags"
                echo ""
            }
        }
        
        failure {
            script {
                echo ""
                echo "╔═══════════════════════════════════════════════════╗"
                echo "║              ❌ BUILD FAILED                      ║"
                echo "╚═══════════════════════════════════════════════════╝"
                echo ""
                echo "Build: #${BUILD_NUMBER}"
                echo "Check console output above for details"
                echo ""
                
                // Show any remaining container logs
                sh '''
                    if docker ps -a | grep jenkins-test-container 2>/dev/null; then
                        echo "=== Test Container Logs ==="
                        docker logs jenkins-test-container 2>&1 || true
                    fi
                '''
            }
        }
    }
}
